[{"categories":["Git"],"content":"pull 新代码与合并冲突 问题 通常我在pull新代码时的操作是： 切换到main分支，pullmain分支代码 切换到自己的分支 git rebase main 通过变基操作合并代码。 但是经常产生冲突！！！导致写完的代码消失不见 解决 梁老师通常直接在自己的分支上 git pull origin main ，pull命令就包含了fetch和merge，如果没有冲突的话会自动合并，有冲突的话会提示解决，但这种操作产生的冲突通常并不多 注意 最好每次敲完代码都commit上去，就算没MR，提交到服务器上也不会导致本地代码消失 如果真的存在很多冲突且最新的commit已经push的话，完全可以重新clone项目，下载自己的分支，如gpgsm分支：‘git branch gpgsm origin/gpgsm’，再pull下来main分支git pull origin main，这样也会减少很多麻烦 ","date":"2024-11-08","objectID":"/posts/0663fe4/:0:0","tags":["Git"],"title":"git pull and merge","uri":"/posts/0663fe4/"},{"categories":["Git"],"content":"问题描述 在修改自己的博客时，想把代码push上去，却失败，目前自我感觉与VPN有关， 在TUN Mode下的问题是 kex_exchange_identification: Connection closed by remote host Connection closed by 20.205.243.166 port 22 fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists. 在System Proxy下的问题是 OpenSSH_8.9p1 Ubuntu-3ubuntu0.10, OpenSSL 3.0.2 15 Mar 2022 debug1: Reading configuration data /home/tieyi/.ssh/config debug1: Reading configuration data /etc/ssh/ssh_config debug1: /etc/ssh/ssh_config line 19: include /etc/ssh/ssh_config.d/*.conf matched no files debug1: /etc/ssh/ssh_config line 21: Applying options for * ssh: Could not resolve hostname github.com: Temporary failure in name resolution Debug过程 测试ssh的命令，ssh -vT git@github.com ，只是加上了-v选项，可以打印日志 OpenSSH_8.9p1 Ubuntu-3ubuntu0.10, OpenSSL 3.0.2 15 Mar 2022 debug1: Reading configuration data /home/tieyi/.ssh/config debug1: Reading configuration data /etc/ssh/ssh_config debug1: /etc/ssh/ssh_config line 19: include /etc/ssh/ssh_config.d/*.conf matched no files debug1: /etc/ssh/ssh_config line 21: Applying options for * debug1: Connecting to github.com [20.205.243.166] port 22. debug1: Connection established. debug1: identity file /home/tieyi/.ssh/id_rsa type -1 debug1: identity file /home/tieyi/.ssh/id_rsa-cert type -1 debug1: identity file /home/tieyi/.ssh/id_ecdsa type -1 debug1: identity file /home/tieyi/.ssh/id_ecdsa-cert type -1 debug1: identity file /home/tieyi/.ssh/id_ecdsa_sk type -1 debug1: identity file /home/tieyi/.ssh/id_ecdsa_sk-cert type -1 debug1: identity file /home/tieyi/.ssh/id_ed25519 type 3 debug1: identity file /home/tieyi/.ssh/id_ed25519-cert type -1 debug1: identity file /home/tieyi/.ssh/id_ed25519_sk type -1 debug1: identity file /home/tieyi/.ssh/id_ed25519_sk-cert type -1 debug1: identity file /home/tieyi/.ssh/id_xmss type -1 debug1: identity file /home/tieyi/.ssh/id_xmss-cert type -1 debug1: identity file /home/tieyi/.ssh/id_dsa type -1 debug1: identity file /home/tieyi/.ssh/id_dsa-cert type -1 debug1: Local version string SSH-2.0-OpenSSH_8.9p1 Ubuntu-3ubuntu0.10 kex_exchange_identification: Connection closed by remote host Connection closed by 20.205.243.166 port 22 可见一直到寻找私钥的这个过程，都还是可以实现的 解决办法 根据这篇解答，github - git pull encounters kex_exchange_identification: Connection closed by remote host - Stack Overflow，我在~/.ssh/config后面加上了 Host github.com Hostname ssh.github.com Port 443 并将Clash调整为TUN Mode，才可以成功。（System Proxy还是不行） 成功后的结果： tieyi@LAPTOP-H67RCA14:~/codespace/site$ ssh -vT git@github.com OpenSSH_8.9p1 Ubuntu-3ubuntu0.10, OpenSSL 3.0.2 15 Mar 2022 debug1: Reading configuration data /home/tieyi/.ssh/config debug1: /home/tieyi/.ssh/config line 12: Applying options for github.com debug1: Reading configuration data /etc/ssh/ssh_config debug1: /etc/ssh/ssh_config line 19: include /etc/ssh/ssh_config.d/*.conf matched no files debug1: /etc/ssh/ssh_config line 21: Applying options for * debug1: Connecting to ssh.github.com [20.205.243.160] port 443. debug1: Connection established. debug1: identity file /home/tieyi/.ssh/id_rsa type -1 debug1: identity file /home/tieyi/.ssh/id_rsa-cert type -1 debug1: identity file /home/tieyi/.ssh/id_ecdsa type -1 debug1: identity file /home/tieyi/.ssh/id_ecdsa-cert type -1 debug1: identity file /home/tieyi/.ssh/id_ecdsa_sk type -1 debug1: identity file /home/tieyi/.ssh/id_ecdsa_sk-cert type -1 debug1: identity file /home/tieyi/.ssh/id_ed25519 type 3 debug1: identity file /home/tieyi/.ssh/id_ed25519-cert type -1 debug1: identity file /home/tieyi/.ssh/id_ed25519_sk type -1 debug1: identity file /home/tieyi/.ssh/id_ed25519_sk-cert type -1 debug1: identity file /home/tieyi/.ssh/id_xmss type -1 debug1: identity file /home/tieyi/.ssh/id_xmss-cert type -1 debug1: identity file /home/tieyi/.ssh/id_dsa type -1 debug1: identity file /home/tieyi/.ssh/id_dsa-cert type -1 debug1: Local version string SSH-2.0-OpenSSH_8.9p1 Ubuntu-3ubuntu0.10 debug1: Remote protocol version 2.0, remote software version babeld-e0f59911d debug1: ","date":"2024-09-02","objectID":"/posts/3ade6a3/:0:0","tags":["Git"],"title":"SSH 连接不上 Github","uri":"/posts/3ade6a3/"},{"categories":["Golang"],"content":"访问已有的对外开放的RestfulApi，包括GET，PUT，POST等方式，文件的内容以Json为主 1. 构建url u := url.URL{ Scheme: \"https\", Host: \"localhost:8080\", } uri := u.JoinPath(\"v1\", \"path1\", \"path2\", \"path3\") ==\u003e uri.String() ==\u003e \"https://localhost:8080/v1/path1/path2/path3\" 2. 构建client client := \u0026http.Client{ Timeout: 100*time.Second, Transport: \u0026http.Transport{ TLSClientConfig: \u0026tls.Config{ InsecureSkipVerify: true } } } \u0026http.Client，\u0026http.Transport，\u0026tls.Config 这里注意都应该是指针 InsecureSkipVerify: true 的作用是跳过tls检查，与curl -k 相同 3. 封装请求数据 目前的应用中，数据都是以json的形式上传，故此处仅展示封装json数据 （1）传入结构体 在数据需要用户手动传入时，可以使用将数据定义为结构体的方式，方便用户传入 data := DataStruct{ Filed1: xxxx, Filed2: xxxx, Filed3: xxxx, } requestData := new(bytes.Buffer) json.NewEncoder(requestData).Encode(data) requestData 用来承接json encode后的data （2）传入map数据 data := make(map[string]interface{}) data[\"field1\"] = \"f1Value\" data[\"field2\"] = \"f2Value\" requestData := new(bytes.Buffer) json.NewEncoder(requestData).Encode(data) 4. 发送请求 在这里就定义请求“GET”、“PUT”或“POST” , 还要定义所需的请求头，最后发送请求 request,err := http.NewRequest(\"GET\",uri,nil) request,err := http.NewRequest(\"POST\",uri,requestData) request,err := http.NewRequest(\"PUT\",uri,requestData) request.Header.Add(\"Content-Type\",\"application/json\") request.Header.Add(\"Cookie\",\"token=\"+token) response,err := client.Do(request) defer response.Body.Close() http.NewRequest 生成请求 request.Header.Add(k, v) 添加请求头 client.Do(request) 发送请求 5. 解析返回值 (1) 结构体承接返回值， 通过实现定义好的结构体承接全部的返回值 body,err := io.ReadAll(response.Body) var r Response err = json.Unmarshal(body,\u0026r) io.ReadAll 读取数据 Response 结构体承接返回的数据 json.Unmarshal(body, \u0026r) 解析返回数据，需注意入参应为指针 \u0026r （2）使用map承接返回值，可以省略定义结构体，直接拿到想要的值 body.err := io.ReadAll(response.Body) reslt := make(map[string]interface{}) err = json.Unmarshal(body,\u0026result) _ = result[\"field1\"].(string) // single json value _ = result[\"field2\"].(bool) _ = result[\"field3\"].(map[string]interface{})[\"field31\"].(string) // multipl json nest 创作于 2024-09-01 第一次修改于 2024-09-06 ","date":"2024-09-01","objectID":"/posts/319de9c/:0:0","tags":["Go","Web"],"title":"REST API in Go","uri":"/posts/319de9c/"},{"categories":["也抓小兔"],"content":"问题 在写好文章后，“菜单系统”中的Categories与Tags均能正常显示，唯独archives页显示 不出来，报的是“找不到页面”的问题。 定位问题与失败原因 在 public/ 文件中，可以找到已经生成的archives页 index.html，说明页面照常生成，但是没有配置出来。所以我将解决问题的重心放在了寻找配置项上面，认为是某些配置项未打开（false/true）的问题。 解决问题 最后在github中提问了作者才解决问题Archives 页面不存在 · hugo-fixit · Discussion #455 (github.com)，目前导致问题的真正原因是：hugo项目的配置文件\u003cproject\u003e/hugo.toml会屏蔽掉主题内的配置文件FixIt/hugo.toml，即只有项目中的配置文件hugo.html才产生作用。 反思 在设置项目主题，设置项目中英文时，我都是在项目的配置文件中进行的更改，同时也发现了，“改过项目配置文件后就不用再改主题内的配置文件了”，但是没有往深入去思考，二者的关系如何，会导致什么影响。试了一次全部copy，但是因为与已经设置的字段冲突就没再继续尝试了，以后做每一步都应该再仔细点、多思考些。 ","date":"2024-07-11","objectID":"/posts/720df59/:0:0","tags":["Blog"],"title":"Blog03 - disappear of Archives Page","uri":"/posts/720df59/"},{"categories":["也抓小兔"],"content":"代码颜色 变量位置： FixIt对变量的控制都在 FixIt/css/_variables.scss，想对变量进行改变，可以在FixIt/css/_variables.scss更改，或在FixIt/css/_override.scss重写，控制代码背景与代码颜色的变量是$code-background-color，$code-background-color-color-dark，$code-color,code-color-dark。 代码位置： 但是对代码块的应用都在文件FixIt/assests/css/_partials/_single/_code.css中，行内代码在//inline注释下，代码块在//indented code 注释下，经过多次实验，代码块的背景色为黑色是目前看起来最舒服的。 注意事项： 此时产生了一个问题，由于行内代码与代码块中代码均为$code-color；且代码块背景色为黑色，导致在代码块中的普通代码看不出来，这边在代码块pre:not(.....{中的对代码code{进行修改，在第40行处增加了color:#ffebe9 !important;，这里最重要的是!important，一定要加，因为不加的话可能会因为多属性重名而被覆盖。 中英文 将博客主要改为英文，在\u003csite\u003e/hugo.toml中添加defaultContentLanguage=\"zh-cn\"，若想对字段进行修改，则在FuxIt/i18n中进行修改。 而顶端的“Archives”，“Categories”，“Tags”则在FixIt/hugo.toml中的菜单系统 [[menu.main]] name=\"\u003c \u003e\" 中进行更改 ","date":"2024-07-11","objectID":"/posts/dbd3dea/:0:0","tags":["Blog"],"title":"Blog02 - CodeBlock and Language","uri":"/posts/dbd3dea/"},{"categories":["OS"],"content":"换行与回车 在了解git commit文件时，发现{content}中的不同字段件使用0a分隔，于是查了一下\\u000a，发现是换行符\\n（new line）的意思。 unicode - What escape character is \\u000a指出，在ASCII中\\n=newline=\\u000a，但在Unicode中，LF与CR有所不同： Line Feed：LF = \\n = \\u000A Carriage Return：CR=\\r=\\u000D 深入发现换行（LF） 与回车（CR） 却有不同 来历 源自于计算机出现前的电传打字机（Teletype Model 33），每秒可打印10个字符，但有一个问题是打完一行换行的时候需要用去0.2秒，可以打印两个字符，若此时有两个新字符传进来，则字符会丢失。于是演职人员想的解决办法是在每行后面加两个字符，一个叫做”回车“，表示将打印头定位在左边界；另一个叫做”换行“，将打字机纸向下移一行。 演变 在计算机发明后，这两个概念也被迁移到计算机上。但当时存储器很贵，两个字符被认为浪费，有些科学家认为一个就足以，于是产生了分歧。 区别与问题 在unix系统中，每行结尾只有”换行“，即\"\\n\"； 在Windows系统中，每行结尾是”换行回车“，即”\\n\\r“; 在 Mac系统中，每行结尾是”回车“。 但问题时，Unix/Mac系统下的文件在Windows中打开时，所有文字会变成一行；而Windows里的文件在Unix/Mac下打开的花，在每行结尾可能会多出一个^M符号 且在编程中，以Windows C++为例 如果只用回车“\\r”（return），就只是回到本行行首，导致本行以前的输出被覆盖掉 int main(){ cout\u003c\u003c\"hahaha\"\u003c\u003c\"\\r\"\u003c\u003c\"xixi\"; } \u003e xixi 使用\"\\n\"（newline）才是回车+换行，把光标先移动到行首，再换到下一样 int main(){ cout\u003c\u003c\"haha\"\u003c\u003c\"\\n\"\u003c\u003c\"xixi\"; } \u003e haha \u003e xixi 所以对于回车与换行，在不同的语言、不同的环境中，对其的支持与定义也各不相同 参考资料： 回车\"（carriage return）和\"换行\"（line feed）的区别和来历-阿里云开发者社区 (aliyun.com) ","date":"2024-07-09","objectID":"/posts/bcf0326/:0:0","tags":["OS"],"title":"换行符与回车键","uri":"/posts/bcf0326/"},{"categories":["也抓小兔"],"content":"2024/6/30 用了 hugo+FixIt+github 搭建了自己的博客网站，os 为 ubuntu24.04 ，记录如下： Hugo 文档： Quick start | Hugo (gohugo.io) Linux | Hugo (gohugo.io) Fix configuration 安装 Hugo : 安装Hugo时，使用apt安装的版本偏低，建议使用snap Go编译Hugo源码是另一种方式，保证最新版本 创建项目及主题： 创建hugo项目 hugo new site \u003cpath\u003e ，如果path非空，需要加上flag --force 在\u003cproject/themes/\u003e中下载主题（目前选择的是FixIt），在频繁更新的条件下建议使用git submodule，目前做法是fork了一份到个人仓库，不知道不fork的效果。 在\u003cproject/hugo.toml\u003e中配置主题、标题、中英文（在FixIt中配置项更多更负责，不如在project中覆盖） baseURL = 'http://localhost:1313' # 本地测试时候的URL，后续挂载到github上 theme = 'FixIt' # ==\u003e 测试时也可以灵活指定主题 `hugo serve --theme=\"FixIt\" -D` title = '捶打石头的101次' defaultContentLanguage = \"zh-cn\" languageCode = \"zh-CN\" languageName = \"简体中文\" 添加文章： hugo new content content/posts/\u003cfile.md\u003e 在content/posts/ 下新建文件\u003cfile.md\u003e 默认draft = true， 建议不要更改draft值，在启动服务时附加参数--buildDrafts / -D ==\u003e hugo serve -D FixIt 主题配置： 在我之前提的问题 – Archives页面不存在 中，FixIt的作者回复到： \u003cproject\u003e/hugo.toml 的优先级始终大于 FixIt/hugo.toml当 project 配置缺省时，主题的配置会当作默认值。但是 Hugo 设定主题的配置有一些限制，默认只有 params, menu, outputformats 和 mediatypes 会存在这种合并行为。其他的配置需要用户手动使用 _merge 字段指定合并行为 ​ 因此，用户需要手动“合并项目与主题配置”（作者的说法是从主题中继承配置）： [mediaTypes] _merge = \"shallow\" [outputFormats] _merge = \"shallow\" [outputs] _merge = \"shallow\" _merge 参数用于控制配置项的合并策略，在使用多层级配置（如模块或主题继承）时非常重要 这里的 shallow 表示浅合并策略，Hugo 的三种配置策略： 策略 行为 适用场景 none 完全忽略上级配置 需要完全覆盖默认配置时 shallow 仅合并顶级键，嵌套结构会被覆盖 大部分场景（最常用） deep 递归合并所有层级（类似 JavaScript 的 Object.assign 深度合并） 需要保留嵌套结构时 综上：Hugo 的配置加载顺序为默认配置 → 主题配置 → 用户配置，而 _merge 策略决定了策略如何组合； 90% 的场景用 shallow 就满足需求 需要保留嵌套配置时使用 deep 完全自定义即彻底重写配置块时使用 none 内置的搜索功能[params.search] 配置如下： 在[params.search]中开启搜索功能 [params.search] enable = true 在[outputs]的home中添加\"json\" [outputs] home = [\"html\", \"rss\", \"archives\", \"offline\", \"search\",\"json\"] Github 在 Github 中保留Hugo项目；将网站托管到.github.io中，无需购买域名 Hugo Repo 新建.gitignore文件，其中主要添加public文件 主题子模块可以在github中同步，目前还未同步过，等后续同步会更新同步以及冲突情况 需要子模块单独add-commit-push，虽然有选项可以提交所有子模块，但我还是建议一个一个提交，（1）git status 可以检查每个子模块，仔细看很难遗漏 （2）子模块的commit肯定不同 website Repo 注意事项： 仓库名称一定要是：“用户名.github.io” 只需要把 \u003cproject\u003e/public/*拷贝到该仓库 上传方法（ github 每次新建仓库都会介绍 ）： 新文件夹 git init git add README.md git commit -m \"\u003ccommit message\u003e\" git branch -M main git remote add origin git@github.com:tearizz/personalWebsite.git git push -u origin main 已经存在的仓库 git remote add origin git@github.com:tearizz/personalWebsite.git git branch -M main git push -u origin main First Modify in 2026-06-27 ","date":"2024-07-02","objectID":"/posts/96e3e7f/:0:0","tags":["blog"],"title":"blog01 - Infrastructure","uri":"/posts/96e3e7f/"}]